-- =====================================================
-- BASIC DATABASE TEST (No Django tables required)
-- Run this BEFORE running Django migrations
-- Compatible with Supabase SQL Editor
-- =====================================================

-- Test 1: Connection & Version
SELECT 
    '‚úÖ Connection Test' as test,
    'SUCCESS' as status,
    version() as postgres_version;

-- Test 2: Current Database Info
SELECT 
    'üìä Database Info' as test,
    current_database() as database_name,
    current_user as current_user,
    pg_size_pretty(pg_database_size(current_database())) as database_size;

-- Test 3: Available Schemas
SELECT 
    'üìÅ Schemas' as test,
    schema_name,
    CASE 
        WHEN schema_name = 'public' THEN '‚úÖ Main schema'
        WHEN schema_name = 'auth' THEN '‚úÖ Supabase Auth'
        WHEN schema_name = 'storage' THEN '‚úÖ Supabase Storage'
        ELSE 'üì¶ Other'
    END as description
FROM information_schema.schemata
WHERE schema_name NOT IN ('pg_catalog', 'information_schema', 'pg_toast')
ORDER BY schema_name;

-- Test 4: Tables in Public Schema
SELECT 
    'üìã Current Tables' as test,
    COALESCE(COUNT(*)::text, '0') as table_count,
    CASE 
        WHEN COUNT(*) = 0 THEN '‚ö†Ô∏è  No tables yet - Ready for Django migrations'
        WHEN COUNT(*) > 0 THEN '‚úÖ ' || COUNT(*)::text || ' tables found'
    END as status
FROM information_schema.tables
WHERE table_schema = 'public';

-- Test 5: List All Existing Tables (if any)
SELECT 
    'üìÑ Table List' as category,
    table_name,
    table_type,
    CASE 
        WHEN table_name LIKE 'django_%' THEN 'üêç Django System'
        WHEN table_name LIKE 'auth_%' THEN 'üîê Auth'
        WHEN table_name LIKE 'users_%' THEN 'üë§ Users'
        WHEN table_name LIKE 'products_%' THEN 'üõçÔ∏è Products'
        WHEN table_name LIKE 'orders_%' THEN 'üì¶ Orders'
        WHEN table_name LIKE 'sellers_%' THEN 'üè™ Sellers'
        WHEN table_name LIKE 'analytics_%' THEN 'üìä Analytics'
        ELSE 'üìã Other'
    END as module
FROM information_schema.tables
WHERE table_schema = 'public'
ORDER BY table_name;

-- Test 6: Check if Django is Ready
SELECT 
    'üêç Django Status' as test,
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name = 'django_migrations'
        ) THEN '‚úÖ Django migrations table exists'
        ELSE '‚ö†Ô∏è  Django not migrated yet'
    END as status,
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name = 'django_migrations'
        ) THEN 'Run: python manage.py showmigrations'
        ELSE 'Run: python manage.py migrate'
    END as next_step;

-- Test 7: Check Expected Django Tables
WITH expected_tables AS (
    SELECT unnest(ARRAY[
        'django_migrations',
        'django_session',
        'django_content_type',
        'users_user',
        'products_category',
        'products_product',
        'orders_cart',
        'orders_order',
        'sellers_sellerprofile',
        'analytics_productview'
    ]) as table_name
)
SELECT 
    'üîç Expected Tables' as category,
    e.table_name,
    CASE 
        WHEN t.table_name IS NOT NULL THEN '‚úÖ EXISTS'
        ELSE '‚ùå MISSING'
    END as status
FROM expected_tables e
LEFT JOIN information_schema.tables t 
    ON e.table_name = t.table_name 
    AND t.table_schema = 'public'
ORDER BY 
    CASE WHEN t.table_name IS NOT NULL THEN 0 ELSE 1 END,
    e.table_name;

-- Test 8: Database Extensions
SELECT 
    'üîå Extensions' as test,
    extname as extension_name,
    extversion as version,
    '‚úÖ Installed' as status
FROM pg_extension
WHERE extname NOT IN ('plpgsql')
ORDER BY extname;

-- Test 9: Connection Settings
SELECT 
    '‚öôÔ∏è  Connection Info' as test,
    name as setting,
    setting as value
FROM pg_settings
WHERE name IN ('max_connections', 'shared_buffers', 'timezone', 'server_version')
ORDER BY name;

-- Test 10: Check SSL Requirement
SELECT 
    'üîí SSL Status' as test,
    CASE 
        WHEN ssl THEN '‚úÖ SSL Enabled'
        ELSE '‚ö†Ô∏è  SSL Disabled'
    END as status
FROM pg_stat_ssl
WHERE pid = pg_backend_pid();

-- =====================================================
-- FINAL SUMMARY
-- =====================================================

SELECT 
    '=' as divider,
    '=' as col2,
    '=' as col3,
    '=' as col4,
    '=' as col5
FROM generate_series(1, 60);

SELECT 
    'üìã SUMMARY' as section,
    '' as detail,
    '' as status,
    '' as action,
    '' as info;

-- Connection Status
SELECT 
    '‚úÖ Connection' as section,
    'Database connection successful' as detail,
    '‚úÖ PASS' as status,
    '' as action,
    current_database() as info;

-- Schema Status
SELECT 
    '‚úÖ Schema' as section,
    'Public schema exists and accessible' as detail,
    '‚úÖ PASS' as status,
    '' as action,
    '' as info;

-- Django Migration Status
SELECT 
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name = 'users_user'
        ) THEN '‚úÖ Django Ready'
        ELSE '‚ö†Ô∏è  Django Not Ready'
    END as section,
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name = 'users_user'
        ) THEN 'Django tables detected'
        ELSE 'No Django tables found'
    END as detail,
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name = 'users_user'
        ) THEN '‚úÖ READY'
        ELSE '‚ö†Ô∏è  PENDING'
    END as status,
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name = 'users_user'
        ) THEN 'Database is ready to use'
        ELSE 'Run: python manage.py migrate'
    END as action,
    '' as info;

-- Table Count
SELECT 
    'üìä Tables' as section,
    COUNT(*)::text || ' tables in public schema' as detail,
    CASE 
        WHEN COUNT(*) >= 20 THEN '‚úÖ COMPLETE'
        WHEN COUNT(*) > 0 THEN '‚ö†Ô∏è  PARTIAL'
        ELSE '‚ö†Ô∏è  EMPTY'
    END as status,
    CASE 
        WHEN COUNT(*) = 0 THEN 'Ready for initial migration'
        WHEN COUNT(*) < 20 THEN 'May need to run migrations'
        ELSE 'All tables present'
    END as action,
    '' as info
FROM information_schema.tables
WHERE table_schema = 'public';

-- Next Steps
SELECT 
    'üéØ Next Steps' as section,
    CASE 
        WHEN (SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public') = 0
        THEN '1. Update backend/.env with DB password'
        ELSE '1. ‚úÖ Database configured'
    END as detail,
    '' as status,
    '' as action,
    '' as info
UNION ALL
SELECT 
    '' as section,
    CASE 
        WHEN (SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public') = 0
        THEN '2. Run: python manage.py migrate'
        ELSE '2. ‚úÖ Migrations applied'
    END as detail,
    '' as status,
    '' as action,
    '' as info
UNION ALL
SELECT 
    '' as section,
    CASE 
        WHEN (SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public') = 0
        THEN '3. Run: python manage.py setup_demo_data'
        ELSE '3. Run: python manage.py test_db_connection'
    END as detail,
    '' as status,
    '' as action,
    '' as info
UNION ALL
SELECT 
    '' as section,
    CASE 
        WHEN (SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public') = 0
        THEN '4. Run this test again to verify'
        ELSE '4. Start Django: python manage.py runserver'
    END as detail,
    '' as status,
    '' as action,
    '' as info;

-- Final divider
SELECT 
    '=' as divider,
    '=' as col2,
    '=' as col3,
    '=' as col4,
    '=' as col5
FROM generate_series(1, 60);

-- Success message
SELECT 
    '‚úÖ TEST COMPLETE' as result,
    'Supabase PostgreSQL is ready for Django!' as message,
    NOW() as timestamp;

